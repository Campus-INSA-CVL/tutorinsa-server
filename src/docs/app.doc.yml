info:
  title: API Tutorinsa CVL
  description: API REST pour l'[application]() et le [site web](#) de l'association Tutorinsa de l'[INSA Centre Val de Loire](http://www.insa-centrevaldeloire.fr/). Pour plus d'information, vous pouvez consulter la page [Facebook](https://www.facebook.com/tutorinsacvl/).</br>Ce projet est entièrement réalisé par des étudiants de l'INSA Centre-Val de Loire. Si vous rencontrez des bugs, ou que vous souhaitez nous faire un retour d'expérence, n'hésitez pas à nous contacter ([issues](https://github.com/Campus-INSA-CVL/tutorinsa-server/issues)).
  version: 0.0.0
  termsOfService:
  contact:
    email: esteban.soubiran@insa-cvl.fr
  licence:
    name: MIT
    url: https://github.com/Campus-INSA-CVL/tutorinsa-server/blob/master/LICENSE

components:
  schemas:
    user:
      required:
        - lastName
        - firstName
        - email
        - password
        - permissions
        - yearId
        - departmentId
        - favoriteSubjectsIds
        - difficultSubjectsIds
      type: object
      properties:
        lastName:
          type: string
        firstName:
          type: string
        password:
          type: string
        permissions:
          type: array
          items:
            type: string
            enum:
              - eleve
              - tuteur
              - admin
        yearId:
          type: objectId
          $ref: "#/components/schemas/year"
        departmentId:
          type: objectId
          $ref: "#/components/schemas/department"
        favoriteSubjectsIds:
          type: array
          items:
            type: objectId
            $ref: "#/components/schemas/subject"
        difficultSubjectsIds:
          type: array
          items:
            type: objectId
            $ref: "#/components/schemas/subject"
        createdPostsIds:
          type: array
          items:
            type: objectId
            $ref: "#/components/schemas/post"
        studentSubscriptionsIds:
          type: array
          items:
            type: objectId
            $ref: "#/components/schemas/post"
        tutorSubscriptionsIds:
          type: array
          items:
            type: objectId
            $ref: "#/components/schemas/post"
    findUser:
      type: object
      properties:
        lastName:
          type: string
        firstName:
          type: string
        password:
          type: string
        permissions:
          type: array
          items:
            type: string
            enum:
              - eleve
              - tuteur
              - admin
        yearId:
          type: objectId
        departmentId:
          type: objectId
        favoriteSubjectsIds:
          type: array
          items:
            type: objectId
        difficultSubjectsIds:
          type: array
          items:
            type: objectId
        createdPostsIds:
          type: array
          items:
            type: objectId
        year:
          $ref: "#/components/schemas/getYear"
        department:
          $ref: "#/components/schemas/getDepartment"
        favoriteSubjects:
          $ref: "#/components/schemas/getSubject"
        difficultSubjects:
          $ref: "#/components/schemas/getSubject"
        __v:
          type: number
    getUser:
      type: object
      properties:
        _id:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        password:
          type: string
        permissions:
          type: array
          items:
            type: string
            enum:
              - eleve
              - tuteur
              - admin
        yearId:
          type: objectId
        departmentId:
          type: objectId
        favoriteSubjectsIds:
          type: array
          items:
            type: objectId
        difficultSubjectsIds:
          type: array
          items:
            type: objectId
        createdPostsIds:
          type: array
          items:
            type: objectId
        studentSubscriptionsIds:
          type: array
          items:
            type: objectId
        tutorSubscriptionsIds:
          type: array
          items:
            type: objectId
        year:
          $ref: "#/components/schemas/getYear"
        department:
          $ref: "#/components/schemas/getDepartment"
        favoriteSubjects:
          $ref: "#/components/schemas/getSubject"
        difficultSubjects:
          $ref: "#/components/schemas/getSubject"
    createUser:
      type: object
      properties:
        lastName:
          type: string
        firstName:
          type: string
        password:
          type: string
        permissions:
          type: array
          items:
            type: string
            enum:
              - eleve
              - tuteur
              - admin
        yearId:
          type: objectId
        departmentId:
          type: objectId
        favoriteSubjectsIds:
          type: array
          items:
            type: objectId
        difficultSubjectsIds:
          type: array
          items:
            type: objectId
    year:
      required:
        - name
      type: object
      properties:
        name:
          type: string
    getYear:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        __v:
          type: number
    department:
      required:
        - name
      type: object
      properties:
        name:
          type: string
    getDepartment:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        __v:
          type: number
    subject:
      required:
        - name
      type: object
      properties:
        name:
          type: string
    getSubject:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        __v:
          type: number
    errors:
      type: object
      properties:
        name:
          type: string
        message:
          type: string
        code:
          type: integer
        className:
          type: string
        data:
          type: object
          properties:
            url:
              type: string
        errors:
          type: object
    credentials:
      type: object
      properties:
        strategy:
          type: string
        email:
          type: string
        password:
          type: string
    auth:
      type: object
      properties:
        accessToken:
          type: string
        authentication:
          type: object
          properties:
            strategy:
              type: string
        user:
          type: object
          items:
            $ref: "#/components/schemas/user"

  responses:
    BadRequest:
      description: bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errors"
          example:
            name: BadRequest
            message: Cast to ObjectId failed for value '${value}' at path '${path}' for model '${modelName}'
            code: 400
            className: bad-request
            errors: {}
    Forbidden:
      description: forbiden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errors"
          example:
            name: Forbidden
            message: You are not allowed to ${method} on ${service}
            code: 403
            className: forbidden
            errors: {}
    NotFound:
      description: not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errors"
          example:
            name: NotFound
            message: No record found for id ${_id}
            code: 404
            className: not-found
            errors: {}
    NotAllowed:
      description: method not allowed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errors"
          example:
            name: MethodNotAllowed
            message: Provider 'rest' can not call '${method}'. (disallow)
            code: 405
            className: method-not-allowed
            errors: {}
    GeneralError:
      description: error in server
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errors"
          example:
            name: GeneralError
            message: ""
            code: 500
            className: general-error
            data: {}
            errors: {}

  securitySchemes:
    bearerAuth:
      type: http
      sheme: bearer
      bearerFormat: JWT
